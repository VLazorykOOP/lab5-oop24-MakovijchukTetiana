#include <iostream>
#include <string>
using namespace std;

// ======= КЛАС Person =======
class Person {
protected:
    string name;
    int age;

public:
    // Конструктор за замовчуванням
    Person() : name("NoName"), age(0) {}

    // Конструктор з параметрами
    Person(string n, int a) : name(n), age(a) {}

    // Конструктор копіювання
    Person(const Person& p) : name(p.name), age(p.age) {}

    // Деструктор
    virtual ~Person() {}

    // Метод введення
    virtual void Input() {
        cout << "Введіть ім'я: ";
        cin >> name;
        cout << "Введіть вік: ";
        cin >> age;
    }

    // Метод друку
    virtual void Print() const {
        cout << "Ім'я: " << name << ", Вік: " << age << endl;
    }

    // Перевантаження операторів
    friend ostream& operator<<(ostream& os, const Person& p) {
        os << p.name << " " << p.age;
        return os;
    }

    friend istream& operator>>(istream& is, Person& p) {
        is >> p.name >> p.age;
        return is;
    }

    // Оператор присвоювання
    Person& operator=(const Person& p) {
        if (this != &p) {
            name = p.name;
            age = p.age;
        }
        return *this;
    }

    // Оператор перенесення
    Person& operator=(Person&& p) noexcept {
        if (this != &p) {
            name = move(p.name);
            age = p.age;
            p.age = 0;
        }
        return *this;
    }
};

// ======= КЛАС Employee =======
class Employee : public Person {
private:
    string position;

public:
    // Конструктор за замовчуванням
    Employee() : Person(), position("None") {}

    // Конструктор з параметрами
    Employee(string n, int a, string pos) : Person(n, a), position(pos) {}

    // Конструктор копіювання
    Employee(const Employee& e) : Person(e), position(e.position) {}

    // Деструктор
    ~Employee() {}

    // Метод введення
    void Input() override {
        Person::Input();
        cout << "Введіть посаду: ";
        cin >> position;
    }

    // Метод друку
    void Print() const override {
        Person::Print();
        cout << "Посада: " << position << endl;
    }

    // Перевантаження операторів
    friend ostream& operator<<(ostream& os, const Employee& e) {
        os << static_cast<const Person&>(e) << " " << e.position;
        return os;
    }

    friend istream& operator>>(istream& is, Employee& e) {
        is >> static_cast<Person&>(e) >> e.position;
        return is;
    }

    // Оператор присвоювання
    Employee& operator=(const Employee& e) {
        if (this != &e) {
            Person::operator=(e);
            position = e.position;
        }
        return *this;
    }

    // Оператор перенесення
    Employee& operator=(Employee&& e) noexcept {
        if (this != &e) {
            Person::operator=(move(e));
            position = move(e.position);
        }
        return *this;
    }
};

// ======= main() =======
int main() {
    setlocale(LC_ALL, "ukr");

    cout << "Введення службовця з клавіатури:\n";
    Employee e1;
    e1.Input();

    cout << "\nВивід службовця:\n";
    e1.Print();

    
    return 0;
}
